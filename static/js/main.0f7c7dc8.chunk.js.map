{"version":3,"sources":["infraestructure/utils/storePersister.js","store/main/reducers.js","store/main/types.js","store/alert/reducers.js","store/alert/types.js","store/request/reducers.js","store/request/types.js","store/auth/reducers.js","store/auth/types.js","store/index.js","infraestructure/routes/PrivateRoute.js","ui/layout/partials/AppFooter.js","infraestructure/plugins/firebase.js","store/main/actions.js","store/request/actions.js","store/alert/actions.js","store/auth/actions.js","services/authService.js","ui/layout/partials/AppUserOptions.js","ui/layout/partials/AppHeader.js","ui/layout/partials/AppMenu.js","ui/layout/partials/AppContent.js","ui/layout/partials/AppLoading.js","ui/layout/partials/AppAlert.js","ui/layout/templates/EmptyTemplate.js","ui/pages/main/Home.js","ui/layout/partials/AppInputs.js","ui/layout/partials/AppForm.js","infraestructure/routes/Routes.js","ui/pages/auth/Login.js","ui/pages/auth/SignUp.js","ui/pages/common/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["initialState","main","isLoading","showMenu","message","notification","show","alert","type","request","url","description","data","isOk","response","auth","isLogged","user","token","routes","getState","serializedState","localStorage","getItem","JSON","parse","e","mainReducer","state","action","payload","alertReducer","requestReducer","authReducer","history","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","connect","props","path","exact","component","to","Footer","Layout","AppFooter","className","console","log","process","Firebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ShowLoading","dispatch","a","StartRequest","EndRequest","HideAlert","ShowWarnAlert","setTimeout","ShowErrorAlert","serviceInstance","authContext","singIn","email","pass","signInWithEmailAndPassword","signUp","createUserWithEmailAndPassword","singOut","signOut","currentUser","this","onSignOut","overlay","Item","UserOutlined","SettingOutlined","onClick","LogoutOutlined","shape","icon","toggleMenu","Header","span","MenuFoldOutlined","MenuUnfoldOutlined","title","offset","currentRoute","location","pathname","useState","setShowMenu","Sider","hidden","collapsed","defaultSelectedKeys","mode","map","route","i","key","DashboardFilled","name","AppContent","Content","children","spinning","tip","hideAlert","showIcon","onClose","closeText","CloseCircleOutlined","withRouter","push","AppTextInput","commonProps","placeholder","onChange","val","target","value","prefix","AppCheckInput","checked","AppDateInput","style","width","showToday","toDate","renderFields","fields","field","renderInput","Text","AppForm","formData","setFormData","textAlign","actions","htmlType","onCancel","onAccept","prop","registeredComponents","Home","signIn","resp","uid","SignIn","showWarn","handleSubmit","SignUp","Title","defaultRoutes","Routes","result","r","store","createStore","applyMiddleware","thunkMiddleware","logger","routerMiddleware","subscribe","stringify","setItem","err","saveState","configureStore","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0f7c7dc8.chunk.js","sourcesContent":["const initialState = {\r\n    main: {\r\n        isLoading: false,\r\n        showMenu: false,\r\n        message: \"\",\r\n        notification: {\r\n            show: false,\r\n            message: \"\"\r\n        }\r\n    },\r\n    alert: {\r\n        show: false,\r\n        type: \"\",\r\n        message: \"\"\r\n    },\r\n    request: {\r\n        url: \"\",\r\n        description: \"\",\r\n        data: null,\r\n        isOk: false,\r\n        response: null,\r\n    },\r\n    auth: {\r\n        isLogged: false,\r\n        user: null,\r\n        token: null,\r\n        routes: []\r\n    }\r\n}\r\n\r\nexport const getState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem(\"__hive_system_state__\")\r\n        if (serializedState === null || serializedState === \"null\") {\r\n            return initialState\r\n        }\r\n        return JSON.parse(serializedState)\r\n\r\n    } catch (e) {\r\n        return initialState\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem(\"__hive_system_state__\", serializedState)\r\n        return true\r\n    } catch (err) {\r\n        console.log(err)\r\n        return false\r\n    }\r\n}\r\n","import { getState } from '../../infraestructure/utils/storePersister'\r\nimport {\r\n    SHOW_LOADING, HIDE_LOADING,\r\n    SHOW_NOTIFICATION, HIDE_NOTIFICATION, TOGGLE_MENU\r\n} from \"./types\"\r\n\r\nconst initialState = getState().main\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SHOW_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                message: action.payload.message,\r\n            }\r\n\r\n        case HIDE_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                message: \"\"\r\n            }\r\n\r\n        case SHOW_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notification: {\r\n                    show: true,\r\n                    message: action.payload.message\r\n                }\r\n            }\r\n\r\n        case HIDE_NOTIFICATION:\r\n            return {\r\n                ...state,\r\n                notification: {\r\n                    show: false,\r\n                    message: \"\"\r\n                }\r\n            }\r\n        case TOGGLE_MENU:\r\n            return {\r\n                ...state,\r\n                showMenu: !state.showMenu\r\n            }\r\n\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport default mainReducer","\r\nexport const SHOW_LOADING = 'SHOW_LOADING'\r\nexport const HIDE_LOADING = 'HIDE_LOADING'\r\n\r\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION'\r\nexport const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION'\r\n\r\nexport const TOGGLE_MENU = 'TOGGLE_MENU'","import { getState } from \"../../infraestructure/utils/storePersister\"\r\n\r\nimport { SHOW_ALERT, HIDE_ALERT } from \"./types\"\r\n\r\nconst alertReducer = (state = getState().alert, action) => {\r\n    switch (action.type) {\r\n        case SHOW_ALERT:\r\n            return {\r\n                ...state,\r\n                show: true,\r\n                type: action.payload.type,\r\n                message: action.payload.message\r\n\r\n            }\r\n\r\n        case HIDE_ALERT:\r\n            return {\r\n                ...state,\r\n                show: false,\r\n                type: \"\",\r\n                message: \"\"\r\n            }\r\n\r\n        default:\r\n            return { ...state };\r\n    }\r\n}\r\n\r\nexport default alertReducer\r\n","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const SHOW_OK_ALERT = 'SHOW_OK_ALERT'\r\nexport const SHOW_INFO_ALERT = 'SHOW_INFO_ALERT'\r\nexport const SHOW_WARN_ALERT = 'SHOW_WARN_ALERT'\r\nexport const SHOW_ERROR_ALERT = 'SHOW_ERROR_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\n","import { getState } from \"../../infraestructure/utils/storePersister\";\r\nimport { START_REQUEST, END_REQUEST } from './types'\r\n\r\nconst requestReducer = (state = getState().request, action) => {\r\n    switch (action.type) {\r\n        case START_REQUEST:\r\n            return {\r\n                ...state,\r\n                url: action.payload.url,\r\n                description: action.payload.description,\r\n                data: action.payload.data\r\n            }\r\n\r\n        case END_REQUEST:\r\n            return {\r\n                ...state,\r\n                isOk: action.payload.isOk,\r\n                response: action.payload.response\r\n            }\r\n\r\n        default:\r\n            return { ...state }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default requestReducer","export const START_REQUEST = 'START_REQUEST'\r\nexport const END_REQUEST = 'END_REQUEST'\r\n","import { getState } from \"../../infraestructure/utils/storePersister\"\r\nimport { SIGN_IN, SIGN_OUT } from \"./types\"\r\n\r\nconst authReducer = (state = getState().auth, action) => {\r\n    switch (action.type) {\r\n        case SIGN_IN:\r\n            return {\r\n                ...state,\r\n                isLogged: true,\r\n                user: action.payload.user,\r\n                token: action.payload.token,\r\n                routes:action.payload.routes\r\n            }\r\n\r\n        case SIGN_OUT:\r\n            return {\r\n                ...state,\r\n                isLogged: false,\r\n                user: null,\r\n                token: null,\r\n                routes: []\r\n            }\r\n        default:\r\n            return { ...state }\r\n    }\r\n\r\n}\r\n\r\nexport default authReducer","export const SIGN_IN = 'SIGN_IN'\r\nexport const SIGN_OUT = 'SIGN_OUT'\r\n\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux'\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport { createBrowserHistory } from 'history'\r\n\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\r\n\r\nimport mainReducer from './main/reducers'\r\nimport alertReducer from './alert/reducers'\r\nimport requestReducer from './request/reducers'\r\nimport authReducer from './auth/reducers'\r\n\r\nimport { getState, saveState } from '../infraestructure/utils/storePersister'\r\n\r\nexport const history = createBrowserHistory()\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    main: mainReducer,\r\n    alert: alertReducer,\r\n    request: requestReducer,\r\n    auth:authReducer,\r\n    router: connectRouter(history),\r\n})\r\n\r\nexport const configureStore = () => {\r\n    const initialState = getState()\r\n\r\n    const store = createStore(\r\n        rootReducer,\r\n        initialState,\r\n        applyMiddleware(\r\n            thunkMiddleware,\r\n            logger,\r\n            routerMiddleware(history)\r\n        )\r\n    )\r\n\r\n\r\n    store.subscribe(() => {\r\n        const currentState = store.getState()\r\n        saveState(currentState)\r\n    })\r\n\r\n    return store\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Route, Redirect } from 'react-router'\r\n\r\nconst PrivateRoute = (props) => {\r\n    if (props.isLogged) {\r\n        return <Route path={props.path} exact component={props.component} />\r\n    }\r\n    return <Redirect to=\"/Login\" />\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLogged: state.auth.isLogged\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute)","import React from 'react'\r\nimport { Layout } from 'antd'\r\nconst { Footer } = Layout\r\n\r\nconst AppFooter = () => {\r\n    return (<Footer className=\"footer\">\r\n        Copyright © 2020 - Powered by CCSolutions\r\n    </Footer>)\r\n}\r\n\r\nexport default AppFooter","import firebase from 'firebase/app'\r\n\r\nimport \"firebase/auth\"\r\nimport \"firebase/firestore\"\r\nimport \"firebase/analytics\"\r\n\r\n// import 'firebase/app'\r\n// import \"firebase/auth\"\r\n// import \"firebase/database\"\r\n// import \"firebase/analytics\"\r\n\r\nconsole.log(process.env)\r\n\r\nconst Firebase = firebase.initializeApp({\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n})\r\nFirebase.analytics()\r\n\r\nexport default Firebase\r\n","import {\r\n    SHOW_LOADING, HIDE_LOADING,\r\n    SHOW_NOTIFICATION, HIDE_NOTIFICATION,\r\n    TOGGLE_MENU\r\n} from \"./types\"\r\n\r\nexport const ToggleMenu = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type:TOGGLE_MENU\r\n        })\r\n    }\r\n}\r\n\r\nexport const ShowLoading = (message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_LOADING,\r\n            payload: {\r\n                message\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const HideLoading = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: HIDE_LOADING\r\n        })\r\n    }\r\n}\r\n\r\nexport const ShowNotification = (type, message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_NOTIFICATION,\r\n            payload: {\r\n                message\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const HideNotification = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: HIDE_NOTIFICATION\r\n        })\r\n    }\r\n}\r\n","import { START_REQUEST, END_REQUEST } from './types'\r\nimport { ShowLoading, HideLoading } from '../main/actions'\r\nexport const StartRequest = (description, url, data) => {\r\n    return async (dispatch) => {\r\n        dispatch(ShowLoading(description))\r\n        dispatch({\r\n            type: START_REQUEST,\r\n            payload: {\r\n                description,\r\n                url,\r\n                data\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const EndRequest = (isOk, response) => {\r\n    return async (dispatch) => {\r\n        dispatch(HideLoading())\r\n        dispatch({\r\n            type: END_REQUEST,\r\n            payload: {\r\n                isOk,\r\n                response\r\n            }\r\n        })\r\n    }\r\n}\r\n","import { SHOW_ALERT, HIDE_ALERT } from \"./types\"\r\n\r\nexport const ShowAlert = (type, message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {\r\n                type,\r\n                message\r\n            }\r\n        })\r\n        setTimeout(() => {\r\n            dispatch(HideAlert())\r\n        }, 5000)\r\n    }\r\n}\r\n\r\nexport const HideAlert = () => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: HIDE_ALERT\r\n        })\r\n    }\r\n}\r\n\r\nexport const ShowOkAlert = (message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: HIDE_ALERT,\r\n            payload: {\r\n                type: \"success\",\r\n                message\r\n            }\r\n        })\r\n        setTimeout(() => {\r\n            dispatch(HideAlert())\r\n        }, 5000)\r\n    }\r\n}\r\n\r\nexport const ShowInfoAlert = (message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {\r\n                type: \"info\",\r\n                message\r\n            }\r\n        })\r\n        setTimeout(() => {\r\n            dispatch(HideAlert())\r\n        }, 5000)\r\n    }\r\n}\r\n\r\nexport const ShowWarnAlert = (message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {\r\n                type: \"warn\",\r\n                message\r\n            }\r\n        })\r\n        setTimeout(() => {\r\n            dispatch(HideAlert())\r\n        }, 5000)\r\n    }\r\n}\r\n\r\nexport const ShowErrorAlert = (message) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: {\r\n                type: \"error\",\r\n                message\r\n            }\r\n        })\r\n        setTimeout(() => {\r\n            dispatch(HideAlert())\r\n        }, 5000)\r\n    }\r\n}","import { SIGN_IN, SIGN_OUT } from \"./types\"\r\nimport AuthService from '../../services/authService'\r\nimport { StartRequest, EndRequest } from \"../request/actions\"\r\nimport { ShowErrorAlert } from \"../alert/actions\"\r\nimport { push } from \"connected-react-router\"\r\n\r\nconst serviceInstance = new AuthService()\r\nexport const SignIn = (user, pass) => {\r\n    return async (dispatch) => {\r\n        let resp = null\r\n        let isOk = true;\r\n        try {\r\n            dispatch(StartRequest(\"Loging In...\", \"firebase/auth\", { user, pass }))\r\n            resp = await serviceInstance.singIn(user, pass)\r\n\r\n            dispatch({\r\n                type: SIGN_IN,\r\n                payload: {\r\n                    user: resp.user,\r\n                    token: resp.user.uid,\r\n                    routes: [{ name: \"Dashboard\", path: \"/Dashboard\" }]\r\n                }\r\n            })\r\n            dispatch(push(\"/Dashboard\"))\r\n        } catch (err) {\r\n            dispatch(ShowErrorAlert(err.message))\r\n            isOk = false\r\n            resp = err\r\n        } finally {\r\n            dispatch(EndRequest(isOk, resp))\r\n            return resp\r\n        }\r\n    }\r\n}\r\n\r\nexport const SignUp = (email, pass) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch(StartRequest(\"Siging Up...\", \"firebase/auth\"))\r\n            let resp = await serviceInstance.signUp(email, pass)\r\n\r\n            dispatch({\r\n                type: SIGN_IN,\r\n                payload: {\r\n                    user: resp.user,\r\n                    token: resp.user,\r\n\r\n                }\r\n            })\r\n        } catch (err) {\r\n            console.log(err)\r\n            dispatch(ShowErrorAlert(err.message))\r\n        } finally {\r\n            dispatch(EndRequest())\r\n        }\r\n    }\r\n}\r\n\r\nexport const SignOut = () => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch(StartRequest(\"Signing Out...\", \"firebase/auth\"))\r\n            await serviceInstance.singOut()\r\n            dispatch({ type: SIGN_OUT })\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            dispatch(ShowErrorAlert(err.message))\r\n        } finally {\r\n            dispatch(EndRequest())\r\n        }\r\n\r\n    }\r\n}","import Firebase from '../infraestructure/plugins/firebase'\r\n\r\nexport default class AuthService {\r\n    authContext = null\r\n    constructor() {\r\n        this.authContext = Firebase.auth()\r\n    }\r\n\r\n    singIn = (email, pass) => {\r\n        return this.authContext.signInWithEmailAndPassword(email, pass)\r\n    }\r\n    signUp = (email, pass) => {\r\n        return this.authContext.createUserWithEmailAndPassword(email, pass)\r\n    }\r\n\r\n    singOut = () => {\r\n        return this.authContext.signOut()\r\n    }\r\n\r\n    currentUser = () => {\r\n        return this.authContext.currentUser\r\n    }\r\n}","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Menu, Dropdown, Avatar } from 'antd';\r\nimport { UserOutlined, LogoutOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { SignOut } from '../../../store/auth/actions';\r\n\r\nconst AppUserOptions = (props) => {\r\n    return (<Dropdown overlay={\r\n        <Menu>\r\n            <Menu.Item>\r\n                <UserOutlined />\r\n                <span>Profile</span>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <SettingOutlined />\r\n                <span>Settings</span>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <label onClick={props.onSignOut}>\r\n                    <LogoutOutlined /> Sign Out\r\n                </label>\r\n            </Menu.Item>\r\n        </Menu>\r\n    }>\r\n        <Avatar shape=\"circle\" icon={<UserOutlined />} />\r\n\r\n    </Dropdown>)\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSignOut: () => dispatch(SignOut())\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(AppUserOptions)","import React from 'react'\r\nimport { Layout, Row, Col, Button } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport AppUserOptions from './AppUserOptions'\r\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons'\r\nimport { ToggleMenu } from '../../../store/main/actions'\r\n\r\n\r\nconst AppHeader = (props) => {\r\n    return (<Layout.Header className=\"header\">\r\n        <Row>\r\n            {\r\n                props.isLogged && <Col span={2}>\r\n                    <Button type=\"primary\" onClick={props.toggleMenu}>\r\n                        {props.showMenu ? <MenuFoldOutlined /> : <MenuUnfoldOutlined />}\r\n                    </Button>\r\n                </Col>\r\n            }\r\n\r\n            <Col span={10}>\r\n                {props.title}\r\n            </Col>\r\n            <Col span={2} offset={10}>\r\n                {\r\n                    props.isLogged ?\r\n                        <AppUserOptions />\r\n                        : null\r\n                }\r\n            </Col>\r\n        </Row>\r\n    </Layout.Header>)\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showMenu: state.main.showMenu,\r\n        isLogged: state.auth.isLogged,\r\n    }\r\n}\r\nconst mapDispatch = (dispatch) => {\r\n    return {\r\n        toggleMenu: () => dispatch(ToggleMenu())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(AppHeader)","import React, { useState } from 'react'\r\nimport { Menu, Layout } from 'antd';\r\nimport { DashboardFilled } from '@ant-design/icons';\r\nimport { connect } from 'react-redux';\r\n\r\nconst AppMenu = (props) => {\r\n    \r\n    const [showMenu, setShowMenu] = useState(true)\r\n    \r\n    const toggleMenu = () => {\r\n        setShowMenu(!showMenu)\r\n    };\r\n\r\n    return (\r\n        <Layout.Sider  hidden={!props.isLogged} collapsed={props.showMenu}>\r\n            <Menu\r\n                onClick={toggleMenu}\r\n                defaultSelectedKeys={[props.currentRoute]}\r\n                mode=\"inline\"\r\n            >\r\n\r\n                {\r\n                    props.routes.map((route, i) =>\r\n                        <Menu.Item key={route.path}>\r\n                            <DashboardFilled />\r\n                            <span>\r\n                                {route.name}\r\n                            </span>\r\n                        </Menu.Item>)\r\n                }\r\n\r\n            </Menu>\r\n        </Layout.Sider>\r\n    );\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLogged: state.auth.isLogged,\r\n        routes: state.auth.routes,\r\n        showMenu:state.main.showMenu,\r\n        currentRoute:state.router.location.pathname\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(AppMenu)","import React from 'react'\r\nimport { Layout } from 'antd'\r\nimport AppMenu from '../partials/AppMenu'\r\n\r\nconst AppContent = (props) => {\r\n\r\n    return <Layout >\r\n        <AppMenu />\r\n        <Layout.Content className=\"content\">\r\n            {props.children}\r\n        </Layout.Content>\r\n    </Layout>\r\n}\r\n\r\nexport default AppContent","import React from 'react'\r\nimport { Spin } from 'antd'\r\nimport { connect } from 'react-redux'\r\n\r\nconst AppLoading = (props) => {\r\n    return (<Spin spinning={props.isLoading}\r\n        tip={props.message} />)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoading: state.main.isLoading,\r\n        message: state.main.message\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AppLoading)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Alert } from 'antd'\r\nimport { CloseCircleOutlined } from '@ant-design/icons'\r\n\r\nimport { HideAlert } from '../../../store/alert/actions'\r\n\r\nconst AppAlert = (props) => {\r\n    if (!props.show)\r\n        return null\r\n\r\n    return (<Alert\r\n        showIcon\r\n        type={props.type}\r\n        message={props.message}\r\n        onClose={props.hideAlert}\r\n        closeText={<CloseCircleOutlined />}\r\n    />)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const alert = state.alert\r\n\r\n    return {\r\n        show: alert.show,\r\n        type: alert.type,\r\n        message: alert.message\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        hideAlert: () => dispatch(HideAlert())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppAlert)","import React from 'react'\r\nimport { Layout } from 'antd'\r\nimport AppFooter from '../partials/AppFooter'\r\nimport AppHeader from '../partials/AppHeader'\r\nimport AppContent from '../partials/AppContent'\r\nimport AppLoading from '../partials/AppLoading'\r\nimport { connect } from 'react-redux'\r\nimport AppAlert from '../partials/AppAlert'\r\n\r\nconst EmptyTemplate = (props) => {\r\n    if (props.isLoading)\r\n        return <AppLoading />\r\n    return (<Layout >\r\n\r\n        <AppHeader title={props.title} />\r\n        <AppAlert />\r\n        <AppContent>\r\n            {props.children}\r\n        </AppContent>\r\n        <AppFooter />\r\n    </Layout>)\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isLoading: state.main.isLoading,\r\n        isLogged: state.auth.isLogged\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(EmptyTemplate)","import React from 'react'\r\nimport { withRouter } from 'react-router'\r\nimport EmptyTemplate from '../../layout/templates/EmptyTemplate'\r\nimport { Button } from 'antd'\r\n\r\nconst HomePage = (props) => {\r\n    return (<EmptyTemplate title=\"Welcome to Hive System\">\r\n        <br /><br /><br />\r\n        <Button type=\"primary\"\r\n            onClick={() => props.history.push(\"/Login\")}>\r\n            Login Here!\r\n                        </Button>\r\n        <Button type=\"link\"\r\n            onClick={() => props.history.push(\"/SignUp\")}>\r\n            or Sign Up Here!\r\n                     </Button>\r\n    </EmptyTemplate>)\r\n}\r\n\r\nexport default withRouter(HomePage) \r\n","import React from 'react'\r\nimport { Input, Icon, Checkbox, DatePicker } from 'antd'\r\n\r\n//This works for text, email, pass & numeric\r\nexport const AppTextInput = (props) => {\r\n    let { name, type, placeholder, icon, onChange } = props.commonProps\r\n    return <Input placeholder={placeholder}\r\n        onChange={(val) => onChange(name, val.target.value)}\r\n        prefix={icon && <Icon type={icon} />}\r\n        type={type} />\r\n}\r\n\r\nexport const AppCheckInput = (props) => {\r\n    let { name, placeholder, onChange } = props.commonProps\r\n    return <Checkbox name={name}\r\n        onChange={(val) => onChange(name, val.target.checked)} >\r\n        {placeholder}\r\n    </Checkbox>\r\n}\r\n\r\nexport const AppDateInput = (props) => {\r\n    let { name, placeholder, onChange } = props.commonProps\r\n    return <DatePicker name={name}\r\n        style={{ width: \"100%\" }}\r\n        showToday\r\n        placeholder={placeholder}\r\n        onChange={(val) => onChange(name, val.toDate())} />\r\n}","import React, { useState } from 'react'\r\nimport { Card, Form, Button, Typography } from 'antd'\r\nimport { AppTextInput, AppCheckInput, AppDateInput } from './AppInputs'\r\n\r\nconst AppForm = (props) => {\r\n    const [formData, setFormData] = useState({})\r\n\r\n    const handleInputs = (prop, val) => {\r\n        setFormData({\r\n            ...formData,\r\n            [prop]: val\r\n        })\r\n    }\r\n\r\n    return <Card title={props.title}\r\n        style={{ textAlign: \"center\", width: props.width || \"max-content\" }}\r\n        actions={[\r\n            <Button type=\"link\" htmlType=\"button\" onClick={props.onCancel}>CANCEL</Button>,\r\n            <Button type=\"primary\" htmlType=\"button\"  onClick={() => props.onAccept(formData)} >SEND</Button>\r\n\r\n        ]}>\r\n        <Form >\r\n            {props.fields ? renderFields(props.fields, handleInputs) :\r\n                \"No fields Found!\"}\r\n        </Form>\r\n    </Card>\r\n\r\n}\r\n\r\nconst renderFields = (fields, onChange) => {\r\n    return (<>{\r\n        fields.map((field, i) => {\r\n            field.onChange = onChange\r\n            return <Form.Item\r\n                key={i}\r\n                name={field.name}  >\r\n                {renderInput(field)}\r\n            </Form.Item>\r\n        })\r\n    }</>)\r\n}\r\nconst renderInput = (props) => {\r\n    switch (props.type) {\r\n        case \"text\":\r\n        case \"email\":\r\n        case \"password\":\r\n        case \"number\":\r\n            return <AppTextInput commonProps={props} />\r\n        case \"check\":\r\n            return <AppCheckInput commonProps={props} />\r\n        case \"date\":\r\n            return <AppDateInput commonProps={props} />\r\n        default:\r\n            return <Typography.Text>{props.type} type not implemented!</Typography.Text>\r\n    }\r\n}\r\n\r\nexport default AppForm","import React from 'react'\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\n\r\n//Routes Type\r\nimport PrivateRoute from './PrivateRoute'\r\n\r\n//Pages\r\nimport Home from '../../ui/pages/main/Home'\r\nimport Login from '../../ui/pages/auth/Login'\r\nimport SignUp from '../../ui/pages/auth/SignUp'\r\nimport Dashboard from '../../ui/pages/common/Dashboard'\r\n\r\nconst registeredComponents = {\r\n    \"Home\": Home,\r\n    \"Login\": Login,\r\n    \"SignUp\": SignUp,\r\n    \"Dashboard\": Dashboard\r\n}\r\n\r\nconst defaultRoutes = [\r\n    { type: \"public\", path: \"/\", name: \"Home\" },\r\n    { type: \"public\", path: \"/Login\", name: \"Login\" },\r\n    { type: \"public\", path: \"/SignUp\", name: \"SignUp\" },\r\n    { type: \"private\", path: \"/Dashboard\", name: \"Dashboard\" },    \r\n]\r\n\r\n\r\nconst Routes = () => {\r\n    let result = defaultRoutes.map((r, i) => {\r\n        if (r.type === \"public\") {\r\n            return  <Route key={i} path={r.path} exact component={registeredComponents[r.name]} />\r\n        } else {\r\n            return <PrivateRoute key={i} path={r.path} component={registeredComponents[r.name]} />\r\n        }\r\n    })\r\n    return (<Router>\r\n        {result}\r\n    </Router>)\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport EmptyTemplate from '../../layout/templates/EmptyTemplate'\r\nimport AppForm from '../../layout/partials/AppForm';\r\nimport { connect } from 'react-redux';\r\nimport { SignIn } from '../../../store/auth/actions';\r\nimport { ShowWarnAlert } from '../../../store/alert/actions';\r\n\r\nconst LoginPage = (props) => {\r\n    const formFields = [\r\n        {\r\n            name: \"email\",\r\n            placeholder: \"Email\",\r\n            type: \"email\",\r\n            icon: \"mail\"\r\n        },\r\n        {\r\n            name: \"pass\",\r\n            placeholder: \"Password\",\r\n            type: \"password\",\r\n            icon: \"lock\"\r\n        },\r\n        {\r\n            name: \"rememberMe\",\r\n            placeholder: \"Remember Me\",\r\n            type: \"check\",\r\n        }\r\n    ]\r\n    const handleSubmit = async (data) => {\r\n        if (data.email === \"\" || data.pass === \"\") {\r\n            props.showWarn(\"Please complete the form!\")\r\n            return\r\n        }\r\n        props.signIn(data.email, data.pass)\r\n    }\r\n    const handleCancel = () => {\r\n        props.history.push(\"/SignUp\")\r\n    }\r\n    return (<EmptyTemplate title=\"Hive System Beta\">\r\n        <br />\r\n        <AppForm width=\"400px\"\r\n            title=\"Login Here!\"\r\n            fields={formFields}\r\n            onAccept={handleSubmit}\r\n            onCancel={handleCancel} />\r\n    </EmptyTemplate>)\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signIn: (email, pass) => dispatch(SignIn(email, pass)),\r\n        showWarn: (message) => dispatch(ShowWarnAlert(message))\r\n    }\r\n\r\n}\r\nexport default connect(null, mapDispatchToProps)(LoginPage)","import React from 'react'\r\nimport EmptyTemplate from '../../layout/templates/EmptyTemplate'\r\nimport AppForm from '../../layout/partials/AppForm';\r\nimport { connect } from 'react-redux';\r\nimport { SignUp } from '../../../store/auth/actions';\r\nimport { ShowWarnAlert } from '../../../store/alert/actions';\r\n\r\nconst SignUpPage = (props) => {\r\n    const formFields = [\r\n        {\r\n            name: \"email\",\r\n            placeholder: \"Email\",\r\n            type: \"email\",\r\n            icon: \"mail\"\r\n        },\r\n        {\r\n            name: \"pass\",\r\n            placeholder: \"Password\",\r\n            type: \"password\",\r\n            icon: \"lock\"\r\n        },\r\n    ]\r\n    const handleSubmit = async (data) => {\r\n        if (data.email === \"\" || data.pass === \"\") {\r\n            props.showWarn(\"Please complete the form!\")\r\n            return\r\n        }\r\n        props.signUp(data.email, data.pass)\r\n    }\r\n    const handleCancel = () => {\r\n        props.history.push(\"/\")\r\n    }\r\n    return (<EmptyTemplate title=\"Hive System Beta\">\r\n        <br />\r\n        <AppForm width=\"400px\"\r\n            title=\"Sign Up Here!\"\r\n            fields={formFields}\r\n            onAccept={handleSubmit}\r\n            onCancel={handleCancel} />\r\n    </EmptyTemplate>)\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signUp: (email, pass) => dispatch(SignUp(email, pass)),\r\n        showWarn: (message) => dispatch(ShowWarnAlert(message))\r\n    }\r\n}\r\nexport default connect(null, mapDispatchToProps)(SignUpPage)","import React from 'react'\r\nimport EmptyTemplate from '../../layout/templates/EmptyTemplate'\r\nimport { connect } from 'react-redux'\r\nimport { Typography } from 'antd'\r\n\r\nconst Dashboard = (props) => {\r\n\r\n    return <EmptyTemplate title=\"Dashboard\">\r\n        <Typography.Title>Welcome {props.user.email}</Typography.Title>\r\n        <br />\r\n    </EmptyTemplate>\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.auth.user,\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Dashboard)","import React from 'react';\r\n\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport { Provider } from 'react-redux';\r\nimport { configureStore, history } from './store';\r\n\r\nimport './App.css';\r\nimport Routes from './infraestructure/routes/Routes';\r\n\r\nconst store = configureStore()\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedRouter history={history}>\r\n        <Routes />\r\n      </ConnectedRouter>\r\n    </Provider>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}